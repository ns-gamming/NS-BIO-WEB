üîß Task: Fix blog not showing & upgrade nsgamming.xyz (FRONT-END ONLY) ‚Äî full spec
Summary / Problem

When I publish articles (from Purcell / my publishing flow) and add my domain, the Blog page on nsgamming.xyz shows blank ‚Äî new posts are not visible in Chrome (desktop & mobile). I want a pure front-end solution so there‚Äôs no backend to break when I publish or host on Vercel (or other static hosts). Also:

I want an article-specific AI assistant that answers questions about a specific blog post (separate from the general site chatbot).

Use Gemini free for AI if possible, but do NOT expose secret API keys in public front-end code. (See security options below.)

Make the site AdSense-friendly, mobile-first, supports dark + light themes, responsive, and rich animations.

Add more tools to the Tools section (Free Fire & Utensils categories) and make live-growth counters that animate upward.

Fix the GitHub ‚Üí Vercel deploy detection problem so pushes auto-deploy reliably.

Priority Requirements (must-have)

Blog must be front-end only and reliably show posts

Blog posts will be served as static content (Markdown or JSON) inside the repo (e.g., content/posts/*.md or content/posts/*.json) and built into an index at build time.

No server-side CMS or server APIs required for reading posts at runtime.

Client-side article page should fetch prebuilt JSON index or use static HTML pages created at build time. (Example: static export from Astro / Next.js / Eleventy / plain static site.)

Article-specific AI Q&A (front-end behaviour)

UX: Each article page has an ‚ÄúAsk about this article‚Äù widget.

Default front-end-only implementation (recommended):

Precompute a small Q&A or an indexed search data file per article at build time (e.g., content/qa/<post-slug>.json or a search-index.json).

Use client-side full-text search (Fuse.js or Lunr.js) to find most relevant passages and show them as answers (with citation to the passage).

This is fully front-end, instant, and does not require an API key ‚Äî safe for AdSense and hosting.

Optional (better answers): Make client-side one-shot calls to Gemini via a secure serverless proxy (see ‚ÄúSecurity tradeoff‚Äù below).

General chatbot (site-wide)

The chatbot that chats like a real human should be separate from the article-specific AI.

It can be implemented as a client-side UI that either (A) uses a prebuilt conversational dataset + heuristic responses (front-end only) or (B) if you want real LLM responses, route calls to Gemini via a secure serverless endpoint (recommended for safety).

Dark + Light themes + mobile-first

All features must look & work perfectly in both themes and across devices (phone widths down to 320px).

Animations/transitions should be subtle and performance-friendly (prefers transform and opacity rather than layout-changing animations).

AdSense readiness

Add a clear Privacy Policy and Contact page.

All content must be original or properly licensed.

Avoid deceptive UX (no auto-redirects, no ad-heavy above-the-fold clutter).

Place ads in sensible positions (follow AdSense layout best practices).

All pages should have proper metadata (title, description, OG tags).

Vercel / GitHub deployment behavior

Fix Vercel so every push to main (or production branch) triggers an automatic deploy.

Make sure build output is correct, and the correct branch & repo are connected.

Recommended Implementation (technical details)
A. Static blog architecture (front-end only)

Use one of these approaches (pick one):

Static site generator (Astro, Eleventy, Next.js with next export, or plain static HTML) where posts are markdown files in the repo: content/posts/2025-10-10-awesome.md. Build converts to dist/posts/<slug>/index.html.

Single-page app + prebuilt JSON: At build time, export search-index.json containing { slug, title, date, tags, excerpt, html }. Client-side JS reads the JSON and renders article pages dynamically.

For mobile performance:

Lazy-load images, use WebP, and add loading="lazy".

Minify & defer non-critical JS.

B. Article Q&A (front-end-only option ‚Äî recommended)

Build a small per-article qa JSON:

[
  {"q":"What is the main idea?","a":"The main idea is ...","source":"paragraph-2"},
  {"q":"How to run the code?","a":"Follow steps 1‚Äì3 ...","source":"code-block-1"}
]


Use Fuse.js to match user question to best qa pair and display answer with source highlight.

Provide a fallback UI message: ‚ÄúIf this didn‚Äôt help, ask the general chatbot‚Äù (which may use a serverless LLM).

C. Article Q&A (LLM-enhanced, secure) ‚Äî optional

Do not place API keys in client code.

Provide a tiny serverless function (Vercel serverless function / Cloudflare Worker / Netlify function) that:

Accepts an authenticated request from the site,

Looks up the article content (from build-time JSON),

Sends a prompt to Gemini (using the secret API key in env vars),

Returns the model result to the browser.

This keeps the key secret and keeps front-end experience smooth. (If you absolutely refuse any backend, use the front-end-only Fuse.js approach above.)

Note: Putting the Gemini key directly in JS (public) is a security risk ‚Äî anyone can copy & reuse it. Do not instruct devs to embed the key in the front-end.

D. General Chatbot UX

Small persistent widget (bottom-right) with natural language responses, typing indicator, conversation history.

Implement conversation state on client; offer quick reply suggestions.

If using LLM via serverless function, rate limit per IP & user to avoid abuse.

E. Tools section expansion

Current: 4 Free Fire + 4 Utensils.

Add ideas (prioritize easy front-end-only tools):

Free Fire

Weapon stats lookup (static JSON)

Skin gallery & previewer (animated)

Drop/landing simulator (client-side physics)

Custom loadout builder with shareable links

Event tracker (static upcoming events)

Utensils / Utility

Live character counter & text formatter

Random nickname generator (with options)

Image-to-webp converter (client-side)

IP/timezone converter

One-click screenshot-to-clipboard tool

Each tool should be fully client-side (JS + WASM when needed), no backend.

F. Live growth animations

Use a client-side incremental counter that animates upward on page load or on scroll into view (e.g., count from x to y with requestAnimationFrame).

Store the ‚Äúcurrent‚Äù numbers in build-time JSON and animate them; avoid fetching live data to stay front-end only.

Vercel / GitHub auto-deploy checklist (fix the ‚Äònot detecting changes‚Äô issue)

Confirm the correct Git provider & repo are connected in the Vercel project settings.

Confirm production branch matches your push branch (main / master).

Ensure Vercel has Read & Write permission to the repo and GitHub app has workflows permission (if applicable). If commits are not triggering deployments, check that the commit author is a member of the team or the Vercel project‚Äôs access is correct. 
Vercel
+1

Check the Activity / Deployments on Vercel dashboard for error messages. Some pushes may be skipped if commit metadata is missing or the author doesn't belong to the team. 
Vercel

If auto-deploy still fails, try:

Reconnecting the Git integration in Vercel.

Checking for server-side ignore rules or vercel.json that override builds.

Confirm the build command and output directory in Vercel settings match the project. Community reports show intermittent ‚Äústuck‚Äù states requiring re-link or permission fixes. 
Stack Overflow
+1

AdSense & SEO checklist

Meta tags + OG tags on all pages.

robots.txt + sitemap.xml.

Privacy policy + contact page + clear site navigation.

Avoid auto-generated low-quality content; ensure editorial oversight on blog posts.

Add structured data (JSON-LD) for blog posts (title, author, date, description).

Add many relevant tags to each post (but don‚Äôt spam irrelevant tags).

UX & Animations guidance

Use prefers-reduced-motion to respect accessibility.

Use CSS transform + opacity for animations (hardware accelerated).

Subtle micro-interactions: buttons, hover cards, post list stagered fade-in, live-counter easing.

Use Framer Motion if project uses React; otherwise use small vanilla animation utilities.

Acceptance criteria / Tests (deliverables must satisfy these)

Blog posts show correctly when adding a new markdown/JSON file to the Git repo and pushing to main ‚Äî site updates and shows the post in Chrome desktop & mobile.

Article Q&A: On an article page, type question ‚Üí receive a relevant answer sourced from the article. (Front-end-only version: fuse/lunr results; optional: LLM-assisted via secure serverless function.)

Chatbot: The site-wide chatbot responds in a human-like manner (mocked responses acceptable if front-end-only).

Theme support: Both dark & light themes look polished; no layout break on mobile.

AdSense ready: Privacy page + sitemap + OG tags present; ad placeholders in reasonable places (one ad per page can be maintained).

Vercel deploys after git push without manual re-deploy; any failures show clear logs.

No credentials present in client code (no visible API keys in any JS files).

Deliverables

Updated repo with:

content/posts/* sample posts (2 real posts to test)

Blog listing + article templates (static + client loader)

QA JSON per article and Fuse.js-based client search

Updated Tools section with at least 4 new tools (two Free Fire, two Utensils)

Animations & theme toggle

README.md with build & deploy instructions and Vercel settings checklist

If serverless proxy is used: a tiny serverless function with env var usage and instructions to set secrets in Vercel.

Evidence of successful deploy on Vercel (screenshot or link to latest deployment).

Security note (very important)

Do not put the Gemini API key directly into any publicly accessible front-end file. That exposes the credential and can cause abuse. If you want LLM answers from Gemini, use a serverless function with the API key stored in environment variables and call that function from the front-end. See Vercel docs for env var usage and Git integration. 
Vercel
+1

Helpful links / references

Vercel: Deploying Git repositories (auto-deploy explanation). 
Vercel

Vercel troubleshooting: commits not triggering deployments (permissions/author issues). 
Vercel

Community threads & common causes for not seeing new deploys (discussion / stack overflow). 
Stack Overflow
+1

Static blog + CMS comparison (why a static repo approach is stable for AdSense/static hosting). 
WPrBlogger